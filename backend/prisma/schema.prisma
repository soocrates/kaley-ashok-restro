generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  phone     String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  activities ActivityLog[]

  @@map("users")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  category    String
  image       String?
  isActive    Boolean  @default(true)
  isVegetarian Boolean @default(false)
  spiceLevel  Int      @default(0)
  ingredients String?  @db.Text
  allergens   String?  @db.Text
  rating      Float    @default(0)
  orderCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]

  @@map("menu_items")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerId    String
  customerName  String
  customerPhone String
  customerEmail String?
  type          OrderType
  status        OrderStatus @default(PENDING)
  total         Float
  deliveryFee   Float       @default(0)
  address       String?
  notes         String?
  paymentStatus PaymentStatus @default(PENDING)
  estimatedTime String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  customer   User        @relation(fields: [customerId], references: [id])
  items      OrderItem[]
  activities ActivityLog[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  notes      String?

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  address     String?
  totalOrders Int      @default(0)
  totalSpent  Float    @default(0)
  lastOrderAt DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customers")
}

model Review {
  id        String      @id @default(cuid())
  customerId String
  rating    Int
  comment   String      @db.Text
  platform  String
  status    ReviewStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  customer User @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model ActivityLog {
  id          String     @id @default(cuid())
  userId      String?
  orderId     String?
  action      String
  description String     @db.Text
  metadata    String?    @db.Text
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())

  user  User?  @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("activity_logs")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum Role {
  CUSTOMER
  STAFF
  MANAGER
  ADMIN
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}